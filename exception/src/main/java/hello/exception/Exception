🔥 Exception(예외)
- 자바의 메인 메서드를 직접 실행하는 경우 main이라는 이름의 쓰레드가 실행
실행 도중에 예외를 잡지 못하고 처음 실행한 main()메서드를 넘어서 예외가 던져지면, 예외 정보를 남기고 해당 쓰레드는 종료

-> WebApplication
웹 애플리케이션은 사용자 요청별로 별도의 쓰레드가 할당되고, 서블릿 컨테이너 안에서 실행.
애플리케이션에서 예외가 발생했는데 try ~ catch로 예외를 잡아서 처리하면 문제X,
그러나 애플리케이션에서 예외를 잡지 못하고 서블릿 밖으로 예외가 전달되면 어떻게 동작할까?

WAS(여기까지 전파) <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)

-----------------------------------------------

섭르릿 예외 처리 - 오류 페이지 작동 원리

서블릿은 Exception(예외)가 발생해서 서블릿 밖으로 전달되거나 또는 response.sendError()가 호출 되었을때 설정된
오류 페이지를 찾는다.

WAS는 해당 예외를 처리하는 오류페이지 정보를 확인,
예를들어 RuntimeException 예외가 WAS까지 전달되면, WAS는 오류 페이지 정보 확인
-> 이 오류는 /error-page/500으로 지정되어 있음
-> 이 페이지를 출력하기 위해 /error-page/500을 다시 요청함

1. WAS <- 필터 <- 서블릿 <- 인터셉터 <- 컨트롤러(예외발생)
2. WAS 'error-page/500' 다시 요청 -> 필터 -> 서블릿 -> 인터셉터 -> 컨트롤러(/error-page/500) -> View
⭐ 웹 브라우저(클라이언트)는 서버 내부에서 이런 일이 일어나는지 전혀 모름!!! 오직 서버 내부에서 오류 페이지를 찾기 위해 추가적인 호출

🔥 정리 🔥
- 예외가 발생해서 WAS까지 전달 ️
- WAS는 오류 페이지 경로를 찾아서 내부에서 오류 페이지를 호출
 (오류 페이지 경로로 필터, 서블릿,인터셉터,컨트롤러 모두 다시 호출)

--------------------------------------------------------------------------

예외가 발생하면 WAS내부에서 다시한번 호출을 쭉 다시한다고 했는데, 이것은 매우 비효율적
결국 클라이언트로 부터 발생한 정상 요청인지, 아니면 오류 페이지를 출력하기 위한 내부 요청인지를 구분할 수 있어야 한다.
서블릿은 이 문제를 해결하기 위해서 `DispatchType` 이라는 추가 정보를 제공!!

DispatchType
- REQUEST : 클라이언트 요청
- ERROR : 오류 요청
- FORWARD : 서블릿에서 다른 서블릿/JSP 호출
- INCLUDE : 서블릿에서 다른 서블릿/JSP의 결과를 포함할 때
- ASYNC : 서블릿 비동기 호출