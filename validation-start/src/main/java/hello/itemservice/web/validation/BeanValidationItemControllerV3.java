package hello.itemservice.web.validation;

import hello.itemservice.domain.item.Item;
import hello.itemservice.domain.item.ItemRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Controller
@RequestMapping("/validation/v3/items")
@RequiredArgsConstructor
public class BeanValidationItemControllerV3 {

    private final ItemRepository itemRepository;

    @GetMapping
    public String items(Model model) {
        List<Item> items = itemRepository.findAll();
        model.addAttribute("items", items);
        return "validation/v3/items";
    }

    @GetMapping("/{itemId}")
    public String item(@PathVariable long itemId, Model model) {
        Item item = itemRepository.findById(itemId);
        model.addAttribute("item", item);
        return "validation/v3/item";
    }

    @GetMapping("/add")
    public String addForm(Model model) {
        model.addAttribute("item", new Item());
        return "validation/v3/addForm";
    }

    /**
     * üî• ÏàúÏÑúÏ§ëÏöî!!  @ModelAttribute Îã§ÏùåÏóê BindingResultÍ∞Ä ÏôÄÏïºÌï®!!
     *
     * Ïä§ÌîÑÎßÅÎ∂ÄÌä∏Í∞Ä spring-boot-stater-validation ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÏûàÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú Bean ValidatorÎ•º Ïù∏ÏßÄÌïòÍ≥† Ïä§ÌîÑÎßÅÏóê ÌÜµÌï©Ìï®
     * -> Ïä§ÌîÑÎßÅ Î∂ÄÌä∏Îäî ÏûêÎèôÏúºÎ°ú Í∏ÄÎ°úÎ≤å ValidatorÎ°ú Îì±Î°ù
     * -> Ïù¥ ValidatorÎäî Ïï†ÎÖ∏ÌÖåÏù¥ÏÖòÏùÑ Î≥¥Í≥† Í≤ÄÏ¶ùÏùÑ ÏàòÌñâ, Ïù¥Î†áÍ≤å Í∏ÄÎ°úÎ≤å ValidatorÍ∞Ä Ï†ÅÏö©ÎêòÏñ¥ ÏûàÍ∏∞Ïóê @Valid, @Validated Îßå Ï†ÅÏö©ÌïòÎ©¥ Îê®
     *
     * + @Validated - Ïä§ÌîÑÎßÅ Ï†ÑÏö© Í≤ÄÏ¶ù Ïï†ÎÖ∏ÌÖåÏù¥ÏÖò
     * + @Valid - ÏûêÎ∞î ÌëúÏ§Ä Í≤ÄÏ¶ù Ïï†ÎÖ∏ÌÖåÏù¥ÏÖò
     * => ÌÅ∞Ï∞®Ïù¥Îäî ÏóÜÏùå, Îã® @ValidatedÎäî groupsÎùºÎäî Í∏∞Îä•Ïù¥ ÏûàÏùå
     *
     * üëâüèª Í≤ÄÏ¶ù ÏàúÏÑú
     * 1. @ModelAttribute Í∞ÅÍ∞ÅÏùò ÌïÑÎìúÏóê ÌÉÄÏûÖ Î≥ÄÌôò ÏãúÎèÑ
     *   -> ÏÑ±Í≥µÌïòÎ©¥ Îã§Ïùå
     *   -> Ïã§Ìå®ÌïòÎ©¥ typeMismatchÎ°ú FieldError Ï∂îÍ∞Ä
     * 2. Validator Ï†ÅÏö©
     * => Î∞îÏù∏Îî©Ïóê ÏÑ±Í≥µÌïú ÌïÑÎìúÎßå Bean Validation Ï†ÅÏö© (ÌÉÄÏûÖÏù¥ ÏïàÎßûÎäîÎç∞, Í≤ÄÏ¶ùÏùÄ ÏùòÎØ∏Í∞Ä ÏóÜÏùå!!)
     * --------
     *
     * BeanValidation Î©îÏãúÏßÄ Ï∞æÎäî ÏàúÏÑú
     * 1. ÏÉùÏÑ±Îêú Î©îÏãúÏßÄ ÏΩîÎìú ÏàúÏÑúÎåÄÎ°ú messageSource ÏóêÏÑú Ï∞æÍ∏∞
     * 2. Ïï†ÎÖ∏ÌÖåÏù¥ÏÖòÏùò message ÏÜçÏÑ± ÏÇ¨Ïö© -> @NotBlank(message = "Í≥µÎ∞±! {0}")
     * 3. ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä Ï†úÍ≥µÌïòÎäî Í∏∞Î≥∏ Í∞í ÏÇ¨Ïö© -> Í≥µÎ∞±Ïùº Ïàò ÏóÜÏäµÎãàÎã§.
     */
    @PostMapping("/add")
    public String addItem(@Validated @ModelAttribute Item item,
                            BindingResult bindingResult,
                            RedirectAttributes redirectAttributes,
                            Model model) {

        if (item.getPrice() != null && item.getQuantity() != null) {
            int resultPrice = item.getPrice() * item.getQuantity();
            if (resultPrice < 10000) {
                bindingResult.reject(
                        "totalPriceMin",
                        new Object[]{10000,
                        resultPrice},
                        null);
            }
        }

        //Í≤ÄÏ¶ùÏóê Ïã§Ìå®ÌïòÎ©¥ Îã§Ïãú ÏûÖÎ†• ÌèºÏúºÎ°ú
        if (bindingResult.hasErrors()) {
            log.info("errors={}", bindingResult);
            return "validation/v3/addForm";
        }

        Item savedItem = itemRepository.save(item);
        redirectAttributes.addAttribute("itemId", savedItem.getId());
        redirectAttributes.addAttribute("status", true);
        return "redirect:/validation/v3/items/{itemId}";
    }

    @GetMapping("/{itemId}/edit")
    public String editForm(@PathVariable Long itemId, Model model) {
        Item item = itemRepository.findById(itemId);
        model.addAttribute("item", item);
        return "validation/v3/editForm";
    }

    @PostMapping("/{itemId}/edit")
    public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
        itemRepository.update(itemId, item);
        return "redirect:/validation/v3/items/{itemId}";
    }

}

